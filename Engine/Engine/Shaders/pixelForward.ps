Texture2D Texture[5];	    // diffuse, normal, specular, emissive, shadowmap
SamplerState SampleType[2]; // wrap,clamp 	

struct PointLight
{
	float3 position;
	float radius;
	float3 color;
	float intensity;	
	float attConstant;
	float attLinear;
	float attExponential;
	int numLights;
};

cbuffer AmbientDirectionalBuffer : register(b0)
{
	float4 ambientColor;
	float4 dirDiffuseColor;
	float3 dirLightDirection;
	float  reflectiveFraction;
}

cbuffer PointLightBuffer : register(b1)
{
	PointLight pointLights[1024];
};

struct PixelInputType
{
    float4 position           : SV_POSITION;
    float2 texCoord           : TEXCOORD0;
	float3 normal             : NORMAL;
	float3 tangent            : TANGENT;
	float3 binormal           : BINORMAL;
	float3 vertexToCamera     : TEXCOORD1;
	float4 positionLightSpace : TEXCOORD2;
	float3 worldPos           : TEXCOORD3;
	float4 vertexColor        : COLOR;
};

float3 GetBaseColor(PixelInputType input, float3 textureColor)
{
	return (textureColor * input.vertexColor) * ambientColor;
}

float3 GetDirectionalColor(PixelInputType input, float3 textureColor, float3 normalMap, float4 specularMap)
{
	// do all shadow calculations first to decide if the pixel should be lit or not
	float bias         = 0.00001;
	float numInLight   = 9;
	float lightPercent = 0;
	
	// get the projected texture coordinates based on the position in eye of the light
	float2 smTexCoord;
	smTexCoord.x = ((input.positionLightSpace.x / input.positionLightSpace.w) / 2.0) + 0.5;
	smTexCoord.y = ((-input.positionLightSpace.y / input.positionLightSpace.w) / 2.0) + 0.5;
	
	if ((saturate(smTexCoord.x) == smTexCoord.x) && (saturate(smTexCoord.y) == smTexCoord.y))
	{
		numInLight = 0;
		
		float neighbour = 1 / 8192.0; // hardcoded for now, dont forget to change if depthmap res change	
		float depthMapValues[9];
		
		depthMapValues[0] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y)).r; // middle
		depthMapValues[1] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y)).r; // left
		depthMapValues[2] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y - neighbour)).r; // top left
		depthMapValues[3] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y - neighbour)).r; // top
		depthMapValues[4] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y - neighbour)).r; // top right
		depthMapValues[5] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y)).r; // right
		depthMapValues[6] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y + neighbour)).r; // bottom right
		depthMapValues[7] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y + neighbour)).r; // bottom 
		depthMapValues[8] = Texture[4].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y + neighbour)).r; // bottom left
		
		float lightDepthValue = (input.positionLightSpace.z / input.positionLightSpace.w) - bias;
		
		for (int i =0; i < 9; i++)
		{
			if (lightDepthValue <= depthMapValues[i])
				numInLight++;
		}
		
		if (numInLight == 0)
			return float3(0,0,0);	
	}
	
	// get how many pixels that not was ocluded in range 0-1 
	lightPercent = numInLight / 9;
	
	float3x3 tangentSpaceMatrix = float3x3(input.tangent, input.binormal, input.normal);
	float3 bumpNormal           = normalize(mul(normalMap, tangentSpaceMatrix));   	
			    		  					   		
    float lightIntensity = saturate(dot(bumpNormal.xyz, dirLightDirection)); 
	
	// get color based on texture, intensity and color of light
    float3 color = textureColor * input.vertexColor.rgb * lightIntensity * dirDiffuseColor.rgb; 
	saturate(color);
	float3 specular = float3(0,0,0);
	
	// add specular effect if the light is affecting the pixel
	if (lightIntensity > 0)
	{					
		// normalize vertex to camera direction vector
		float3 vtc = normalize(input.vertexToCamera);
		
		// phong
		float3 reflection = normalize(2 * lightIntensity * bumpNormal - dirLightDirection);		
		float specularIntensity = pow(saturate(dot(reflection, vtc)), specularMap.a * 255.0);
		specular = (dirDiffuseColor.rgb * specularIntensity) * specularMap.rgb;	
	} 
			
	return color + specular; 
}

float3 GetPointColor(PixelInputType input, float3 textureColor, float3 normalMap, float4 specularMap)
{   
	float3 finalColor = float3(0,0,0);
	int numLights     = pointLights[0].numLights;
	
	for (int i =0; i < numLights; i++)
	{	
		// get light direction and distance from light	
		float3 lightDir = -normalize(input.worldPos - pointLights[i].position);	
		float dst       = length(input.worldPos - pointLights[i].position);
		
		// calculate attuniation	
		float fallOff     = 1 - ((dst / pointLights[i].radius) * 0.5);	// make the falloff 50% slower then the radius to give more control of result depending of attuniation settings
		float attuniation = 1 / (pointLights[i].attConstant + pointLights[i].attLinear * dst + pointLights[i].attExponential * dst * dst);
		attuniation       = (attuniation * pointLights[i].intensity) * fallOff;
		
		if (fallOff >= 0)
		{					
			// get tangentSpaceMatrix for normalmapping and multiply with normalmapsample to get the bumpnormal
			float3x3 tangentSpaceMatrix = float3x3(input.tangent,input.binormal,input.normal);	
			float3 bumpNormal           = normalize(mul(normalMap, tangentSpaceMatrix));   
				
			// get intensity from the normal from normalmap and lightdirection
			float lightIntensity = saturate(dot(bumpNormal, lightDir)); 
			
			// get color based on texture, intensity and color of light
			float3 color = textureColor * input.vertexColor.rgb * lightIntensity * pointLights[i].color; 
			
			// add specular effect if the light is affecting the pixel, dont add specular effect if dst is more then radius
			float3 specular = float3(0,0,0);		
			if (lightIntensity > 0 && dst < pointLights[i].radius)
			{		
				// normalize vertex to camera direction vector
				float3 vtc = normalize(input.vertexToCamera);
							
				// phong
				float3 reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);		
				float specularIntensity = pow(saturate(dot(reflection, vtc)), specularMap.a * 255.0);
				specular = (pointLights[i].color * specularIntensity) * specularMap.rgb;	
			} 
						
			color      += specular;	
			finalColor += (color * attuniation);
		}
	}
     
    return finalColor;
}

float4 Main(PixelInputType input) : SV_TARGET
{						
	float4 textureColor = Texture[0].Sample(SampleType[0], input.texCoord);;		
	float4 normalMap    = Texture[1].Sample(SampleType[0], input.texCoord);
	float4 specularMap  = Texture[2].Sample(SampleType[0], input.texCoord);
	
	// convert normalmap sample to range -1 to 1
	normalMap = (normalMap * 2.0) -1.0;
	
	float3 baseColor        = GetBaseColor(input, textureColor.rgb);
	float3 directionalColor = GetDirectionalColor(input, textureColor.rgb, normalMap.rgb, specularMap);
	float3 pointColor       = GetPointColor(input, textureColor.rgb, normalMap.rgb, specularMap);
	float4 emissiveMap      = Texture[3].Sample(SampleType[0],input.texCoord);
	
	// if the alpha channel of the emissivemap is zero it means that this is 
	// an emissive pixel and should not recive lightning
	if (emissiveMap.a > 0)	
		return float4(Texture[0].Sample(SampleType[0],input.texCoord).rgb * emissiveMap.rgb, 0);
			
	return float4(baseColor + directionalColor + pointColor, textureColor.a); 		                            		   
}






