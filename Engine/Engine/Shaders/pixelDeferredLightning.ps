
Texture2D    Texture[5]; // shadowmap, position, normal, diffuse, specular	
SamplerState SampleType[2]; // wrap,clamp 	
 
 struct PointLight
{
	float3 position;
	float radius;
	float3 color;
	float intensity;	
	float attConstant;
	float attLinear;
	float attExponential;
	int numLights;
};

cbuffer AmbientBuffer : register(b0)
{
	float4 ambientColor;
	float4 cameraPosition;
};

cbuffer DirectionalBuffer : register(b1)
{
	float4x4 lightView;
	float4x4 lightProj;
	float4 lightColorDir;		
	float3 lightDirectionDir;		
};

cbuffer PointLightBuffer : register(b2)
{
	PointLight pointLights[1024];
};

struct PixelInputType
{
    float4 position : SV_POSITION;	
};

float4 GetAmbientColor(float4 diffuseMap)
{
	return diffuseMap * ambientColor;
}

float4 GetDirectionalColor(float4 position, float4 diffuse, float4 normal, float4 specularMap)
{
	// do all shadow calculations first to decide if the pixel should be lit or not
	float bias         = 0.00001;
	float numInLight   = 9;
	float lightPercent = 0;
	
	float4x4 lightViewProj =  mul(lightView, lightProj);
	
	float4 positionLightSpace = mul(position, lightViewProj);
	
	// get the projected texture coordinates based on the position in eye of the light
	float2 smTexCoord;
	smTexCoord.x = ((positionLightSpace.x  / positionLightSpace.w) / 2.0) + 0.5;
	smTexCoord.y = ((-positionLightSpace.y / positionLightSpace.w) / 2.0) + 0.5;
	
	if((saturate(smTexCoord.x) == smTexCoord.x) && (saturate(smTexCoord.y) == smTexCoord.y))
	{
		numInLight = 0;
		
		float neighbour = 1 / 8192.0;	// hardcoded for now, dont forget to change if depthmap res change	
		float depthMapValues[9];
		
		depthMapValues[0] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y)).r; // middle
		depthMapValues[1] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y)).r; // left
		depthMapValues[2] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y - neighbour)).r; // top left
		depthMapValues[3] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y - neighbour)).r; // top
		depthMapValues[4] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y - neighbour)).r; // top right
		depthMapValues[5] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y)).r; // right
		depthMapValues[6] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y + neighbour)).r; // bottom right
		depthMapValues[7] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y + neighbour)).r; // bottom 
		depthMapValues[8] = Texture[0].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y + neighbour)).r; // bottom left
		
		float lightDepthValue = (positionLightSpace.z / positionLightSpace.w) - bias;
		
		for(int i =0; i < 9; i++)
		{
			if( lightDepthValue <= depthMapValues[i])
				numInLight++;
		}
		
		if(numInLight == 0)
			return float4(0,0,0,0);	
	}
	
	// get how many pixels that not was ocluded in range 0-1 
	lightPercent = numInLight / 9;
										  
	// sample from textures, multiply texturecolor with light percent to get blured shadow edges		
	float4 textureColor = diffuse * lightPercent;
			    		  					   		
    float lightIntensity = saturate(dot(normal.xyz, lightDirectionDir)); 
	
	// get color based on texture, intensity and color of light
    float4 color = textureColor * lightIntensity * lightColorDir; 
	saturate(color);
	float4 specular = float4(0,0,0,0);
	
	// add specular effect if the light is affecting the pixel
	if(lightIntensity > 0)
	{		
		float3 vertexToCamera = normalize(cameraPosition.xyz - position.xyz);				
		
		//phong
		float3 reflection = normalize(2 * lightIntensity * normal - lightDirectionDir);		
		float specularIntensity = pow(saturate(dot(reflection, vertexToCamera)), 100.0);
		specular = (lightColorDir * specularIntensity) * specularMap;		
	} 
			
	return (color += specular); 
}

float4 GetPointColor(float4 position, float4 diffuse, float4 normal, float4 specularMap)
{
	float4 finalColor = float4(0,0,0,1);
	for (int i =0; i < pointLights[0].numLights; i++)
	{	
		// get light direction and distance from light	
		float3 lightDir = -normalize(position - pointLights[i].position);	
		float dst = length(position - pointLights[i].position);
		
		// calculate attuniation	
		float fallOff = 1 - ((dst / pointLights[i].radius) * 0.5);	// make the falloff 50% slower then the radius to give more control of result depending of attuniation settings
		float attuniation = 1 / (pointLights[i].attConstant + pointLights[i].attLinear * dst + pointLights[i].attExponential * dst * dst);
		attuniation = (attuniation * pointLights[i].intensity) * fallOff;
		
		if (fallOff >= 0)
		{	
				
			// get intensity from the normal from normalmap and lightdirection
			float lightIntensity = saturate(dot(normal.xyz, lightDir)); 
			
			// get color based on texture, intensity and color of light
			float4 color = diffuse * lightIntensity * float4(pointLights[i].color,1); 
			
			// add specular effect if the light is affecting the pixel, dont add specular effect if dst is more then radius
			float4 specular = float4(0,0,0,0);		
			if(lightIntensity > 0 && dst < pointLights[i].radius)
			{						
				float3 vertexToCamera = normalize(cameraPosition.xyz - position.xyz);
							
				//phong
				float3 reflection = normalize(2 * lightIntensity * normal - lightDir);		
				float specularIntensity = pow(saturate(dot(reflection, vertexToCamera)), specularMap.a * 255.0);
				specular.rgb = (pointLights[i].color * specularIntensity) * specularMap.rgb;
			} 
						
			color += specular;	
			finalColor += (color * attuniation);
		}
	}
     
    return finalColor;
}

float4 Main(PixelInputType input) : SV_TARGET
{            
	float4 position = Texture[1].Load(int3(input.position.xy,0));
	float4 normal   = Texture[2].Load(int3(input.position.xy,0));
	float4 diffuse  = Texture[3].Load(int3(input.position.xy,0));
	float4 specular = Texture[4].Load(int3(input.position.xy,0));

	// alpha channel is flagged as 0 if this is a emissive pixel
	// dont do any lightning calculations and only return the emissive
	// color that is stored in the diffuse map
	if (diffuse.a == 0)	
		return float4(diffuse.rgb, 1);		
		
	float4 finalColor = float4(0,0,0,1);

	float4 ambientColor     = GetAmbientColor(diffuse);
	float4 directionalColor = GetDirectionalColor(position, diffuse, normal, specular);
	float4 pointColor       = GetPointColor(position, diffuse, normal, specular);
	
	finalColor = ambientColor + directionalColor + pointColor;
	
    return finalColor;	   
}






























